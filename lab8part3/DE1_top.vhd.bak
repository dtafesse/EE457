LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;


entity de1_top is
generic (
   simulation_wide : positive := 28;    -- used for simulation to overide width
	simulation_max  : positive := 50000000); -- used for simulaiton to oreride max value
port
(
	-- 50Mhz clock, i.e. 50 Million rising edges per second
   clock_50 :in  std_logic; 
   -- 7 Segment Display
	hex0     :out std_logic_vector(6 downto 0); -- right most
	hex1     :out std_logic_vector(6 downto 0);	
	hex2     :out std_logic_vector(6 downto 0);	
	hex3     :out std_logic_vector(6 downto 0);	
	hex4     :out std_logic_vector(6 downto 0);	
	hex5     :out std_logic_vector(6 downto 0); -- left most
   -- Red LEDs above Slider switches
	-- drive the ledr's high to light them up
   ledr     :out std_logic_vector(9 downto 0);
	-- key/Push Button, push button to drive a signal low, normally high
	key      :in  std_logic_vector(3 downto 0);  
   -- Slider Switch, logic 0 when slide down, logic 1 when pushed towards 7 segments
	sw       :in	 std_logic_vector(9 downto 0) 
);

end de1_top;

architecture struct of de1_top is

	-- define signals to be used
	signal enable_pulse_every_second  : std_logic;
	signal reset_n                      : std_logic;
	signal first_meta_output : STD_LOGIC_VECTOR (9 downto 0);
	signal sw_output : STD_LOGIC_VECTOR (9 downto 0);
	signal load_counter                  : std_logic;
	signal read_address 	: std_logic_vector(4 downto 0);
	signal read_address_lower 	: std_logic_vector(3 downto 0);
	signal read_address_upper 	: std_logic_vector(3 downto 0);
	signal q_data : std_logic_vector(3 downto 0);
	signal data : std_logic_vector(3 downto 0);
	signal write_address : std_logic_vector(4 downto 0);
	signal write_address_upper : std_logic_vector(3 downto 0);

	-- define the component	
	component seven_segment_cntrl IS
		-- Begin port declaration
		port (
			-- Declare data input "input"
			input : in unsigned(3 downto 0);
			-- Declare the seven segment output
			hex   : out std_logic_vector(6 downto 0));
	-- End entity		
	end component;

	component ram32x4 is
		port
		(
			clock: in std_logic:= '1';
			data: in std_logic_vector(3 DOWNTO 0);
			rdaddress: in std_logic_vector(4 DOWNTO 0);
			wraddress: in std_logic_vector(4 DOWNTO 0);
			wren: in std_logic := '0';
			q: out std_logic_vector(3 DOWNTO 0)
		);
		end component ram32x4;

	-- define the component
	component gen_counter is
	generic (
			wide :positive; -- how many bits is the counter
			max  :positive  -- what is the max count
			);
	port (
			clk	 :in	std_logic;
			data	 :in  std_logic_vector(wide-1 downto 0 );
			load	 :in  std_logic;
			enable :in  std_logic;
			reset	 :in  std_logic;
			count	 :out std_logic_vector(wide-1 downto 0 );
			term	 :out std_logic);
		end component;


	begin

		-- turn off the other 7 segments, drive high to turn off
		--hex1 <= (others => '1');

		-- turn off unused LEDs, drive 0 to keep off
		ledr(9 downto 0) <= (others =>'0');

		-- use a name that makes sense, key(0) is our reset, push to reset
		reset_n <= key(0);  -- key is normally high

		data <= sw_output(3 downto 0);
		write_address_upper <= "000" & sw_output(4);
		write_address <= sw_output(8 downto 4);
		read_address_lower <= read_address(3 downto 0);
		read_address_upper <= "000" & read_address(4);
		
		
		-- Double D Flip Flop
		process (sw, clock_50, reset_n) is
		begin
			if reset_n = '0' then
					first_meta_sw_output <= (others => '0');
					sw_output <= (others => '0');
			elsif rising_edge(clock_50) then
					first_meta_sw_output <= sw;
					sw_output <= first_meta_sw_output;
			end if;
		end process;

		large_counter : gen_counter
		generic map (
			wide => simulation_wide, 
			max  => simulation_max
		)
		port map(
			clk => clock_50,
			load => '0',
			enable   => '1',   -- always enabled
			data => (others => '0'),
			count	 => open,  -- we are not using this signal
			reset => reset_n,
			enable => '1',
			term => enable_pulse_every_second
		);

		load_counter <= not key(2); -- need to invert, key is normally high		
				
		-- this counter will count 0.5 seconds.			
		one_second_counter : gen_counter 
		generic map (
			wide => 5, 
			max  => 31   
			)
		port map (
			clk	 => clock_50,
			data	 => (others => '0'),
			load	 => load_counter, 
			enable   => enable_pulse_every_second, 
			reset_n	 => reset_n,
			count	 => read_address
		);

		ram : ram32x4
		port map(
			clock => clock_50,
			data => data,
			rdaddress => read_address,
			wraddress => write_address,
			wren => sw_output(9),
			q => q_data
		);

		hex0segment: seven_segment_cntrl
			port map (
				input => q_data,
				hex => hex0
			);
		hex1segment: seven_segment_cntrl
			port map (
				input => data,
				hex => hex1
			);
		hex2segment: seven_segment_cntrl
			port map (
				input => read_address_lower,
				hex => hex2
			);
		hex3segment: seven_segment_cntrl
			port map (
				input => read_address_upper,
				hex => hex3
			);
		hex4segment: seven_segment_cntrl
			port map (
				input => write_address(3 downto 0),
				hex => hex4
			);
		hex5segment: seven_segment_cntrl
			port map (
				input => write_address_upper,
				hex => hex5
			);

end; -- end the design









